function closure
================
-A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. 

-A closure is a concept where an inner function has access to its outer function's variables even after the outer function's execution is Completed/Closed.

-When an inner function accesses any data from the outer function, a 'closure' scope gets attached to the inner function.
 hence inner function can access outer function data.

-When the outer function execution completes, you’d expect all its variables to be no longer accessible. However, if the inner function uses variables from the outer function, those variables remain accessible.

-The inner function retains access to the outer function’s scope, because the inner function ‘remembers’ the environment in which it was created.


Call() & apply() & bind()
========================
-call(),apply(),bind() are methods from 'Object' class.
-used to change the context(this value) while calling a function.
-while calling a function, if we want to pass 'this' explicitely.
-Calls a method of an object, substituting another object for the current object.

call() - call() is used to pass differenet object as a value to 'this'.
	   call() method calls a function with a given 'this' value and arguments provided individually.
       using call() one object can invoke another object's function.    

apply() - apply() takes 2 arguments.1st arguement is an object(this), 2nd arguement is an array of items.
      -it takes the values from that array and passes as individual arguements to a method.

-bind() creates a new function and when that(new function) is called will have its 'this' set to the provided value with a given sequence of arguements.
-it is most useful for binding the value of 'this' in methods of classes 
  that you want to pass into other functions.